#include <iostream>

using namespace std;

int partition(int* data, int len, int start, int end)
{
	if (data == nullptr || len <= 0 || start < 0 || end <= start || end >= len)
	{
		throw exception();
	}
	//????????
	//small????,???start - 1??,????
	//?????????,????????
	//index??????????,????????,???????????
	//index??????????,???????????
	//		(?????????index????,????,??????;??????,???????????????????,??index??????????,??????)
	//index????????,???index???small???????????
	//?index?????,?????????????,???????????,??????????????
	//??:index???????????,???????????????,??????????,??????????
	int small = start - 1;
	for (int index = start; index < end; ++index)
	{
		if (data[index] < data[end])
		{
			++small;
			if (small != index)
			{
				int temp = data[small];
				data[small] = data[index];
				data[index] = temp;
			}
		}
	}
	++small;
	int temp = data[small];
	data[small] = data[end];
	data[end] = temp;

	return small;
}

void quickSort(int* data, int len, int start, int end)
{
	if (start == end)
	{
		return;
	}
	int index = partition(data, len, start, end);
	if (index > start)
	{
		quickSort(data, len, start, index - 1);
	}
	if (index < end)
	{
		quickSort(data, len, index + 1, end);
	}
}
int main()
{
	static const int len = 9;
	int data[] = {1,6,3,9,5,8,3,4,7,0};
	quickSort(data, len, 0, len - 1);
	for (int i = 0; i < len; ++i)
	{
		cout << data[i] << "\t";
	}
	return 0;
}
